} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
shinyApp(ui,server)
shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app
app<- shinyApp(
####Connect to AWQ DB and get most recent stations table
cn<- odbcDriverConnect("Driver=ODBC Driver 13 for SQL Server; Server= 10.18.8.110; Database=WQX;
Uid=wqx_readonly;Pwd=wqx_readonly")
sites<- sqlFetch(cn,"Stations")
sites$SID<- paste(sites$Station_Name,sites$STA_SEQ)
odbcClose(cn)
#######Load user interface
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
setwd("P:/Projects/GitHub_Prj/SeasonalProductivity")
library(dataRetrieval)
library(plyr)
library(ggplot2)
library(grid)
library(reshape2)
SID<- c("01189000","01209700","01193500")
Cd<-c("00605","00608","00613","00618","00631","00660","00665","00671","62855")
sdate<-"2016-01-01"
edate<-"2017-01-01"
data <- readNWISqw(siteNumbers = SID,
parameterCd = Cd,
startDate = sdate,
endDate = edate)
pCd<-unique(data$parm_cd)
pNm<- c("Organic nitrogen, wu, mg/l","Ammonia, wf, mg/l as N","Nitrite, wf, mg/l as N",
"Nitrate, wf, mg/l as N","NO3+NO2, wf, mg/l as N","Orthophosphate, wf, mg/l",
"Phosphorus, wu, mg/l as P","Orthophosphate, wf, mg/l as P","Total nitrogen, wu, mg/l")
n<-as.data.frame(cbind(pCd,pNm))
data$site_no<- factor(data$site_no,levels=c("01193500","012009700","01189000"))
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
d$site_no<- factor(d$site_no,levels=c("01193500","012009700","01189000"),ordered=TRUE)
assign(paste("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
labs(title=n[i,2]))
}
p1
p  1
p 1
data <- readNWISqw(siteNumbers = SID,
parameterCd = Cd,
startDate = sdate,
endDate = edate)
pCd<-unique(data$parm_cd)
pNm<- c("Organic nitrogen, wu, mg/l","Ammonia, wf, mg/l as N","Nitrite, wf, mg/l as N",
"Nitrate, wf, mg/l as N","NO3+NO2, wf, mg/l as N","Orthophosphate, wf, mg/l",
"Phosphorus, wu, mg/l as P","Orthophosphate, wf, mg/l as P","Total nitrogen, wu, mg/l")
n<-as.data.frame(cbind(pCd,pNm))
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
d$site_no<- factor(d$site_no,levels=c("01193500","012009700","01189000"),ordered=TRUE)
assign(paste("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
labs(title=n[i,2]))
}
p4
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
labs(title=n[i,2]))
}
p1
i<-1
n
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
labs(title=n[i,2]))
}
p1
data$site_no<- factor(data$site_no,levels=c("01193500","012009700","01189000"))
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
labs(title=n[i,2]))
}
p1
unique(data$site_no)
SID<- c("01189000","01209700","01193500")
Cd<-c("00605","00608","00613","00618","00631","00660","00665","00671","62855")
sdate<-"2016-01-01"
edate<-"2017-01-01"
data <- readNWISqw(siteNumbers = SID,
parameterCd = Cd,
startDate = sdate,
endDate = edate)
unique(data$site_no)
pCd<-unique(data$parm_cd)
pNm<- c("Organic nitrogen, wu, mg/l","Ammonia, wf, mg/l as N","Nitrite, wf, mg/l as N",
"Nitrate, wf, mg/l as N","NO3+NO2, wf, mg/l as N","Orthophosphate, wf, mg/l",
"Phosphorus, wu, mg/l as P","Orthophosphate, wf, mg/l as P","Total nitrogen, wu, mg/l")
n<-as.data.frame(cbind(pCd,pNm))
data$site_no<- factor(data$site_no,levels=c("01193500","01209700","01189000"))
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
labs(title=n[i,2]))
}
p1
p2
p3
p4
p5
p6
p7
p8
p9
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
labs(title=n[i,2]))+
scale_y_log10()
}
p7
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va),log10="y")+
geom_boxplot()+
labs(title=n[i,2]))
}
p5
p7
class(data$result_va)
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va),log="y")+
geom_boxplot()+
labs(title=n[i,2]))
}
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[i,2]))
}
p7
p1
p8
#####MULTI-Plot Function##############
#######################################
#call this with p1,p,2,... cols=4
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
plots <- c(list(...), plotlist)
numPlots = length(plots)
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
pdf("NutrientRanges.pdf")
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
pdf("NutrientRanges.pdf",width=11,height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[i,2]))+
theme(axis.title=element_blank())
}
pdf("NutrientRanges.pdf",width=11,height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
p1
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[i,2]))+
theme(axis.title.x=element_blank(),axis.title.y=element_blank())
}
p1
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[i,2]))+
theme(axis.title.x=element_blank(),axis.title.y=element_blank())
i<-1
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[i,2]))+
theme(axis.title.x=element_blank(),axis.title.y=element_blank())
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[i,2]))
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[1,2]))+
theme(axis.title.x=element_blank(),axis.title.y=element_blank())
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[1,2]))
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[i,2])+
theme(axis.title.x=element_blank(),axis.title.y=element_blank()))
}
pdf("NutrientRanges.pdf",width=11,height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
