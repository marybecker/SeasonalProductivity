app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
shinyApp(ui,server)
shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app
app<- shinyApp(
####Connect to AWQ DB and get most recent stations table
cn<- odbcDriverConnect("Driver=ODBC Driver 13 for SQL Server; Server= 10.18.8.110; Database=WQX;
Uid=wqx_readonly;Pwd=wqx_readonly")
sites<- sqlFetch(cn,"Stations")
sites$SID<- paste(sites$Station_Name,sites$STA_SEQ)
odbcClose(cn)
#######Load user interface
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
setwd("P:/Projects/GitHub_Prj/SeasonalProductivity")
library(vegan)
library(reshape2)
library(dplyr)
library(lattice)
library(ggplot2)
library(lubridate)
SPP<- read.csv("data/SPP.csv",header=TRUE,row.names=1)
SPP[is.na(SPP)] <- 0
sites<- read.csv("data/sites.csv",header=TRUE)
sites$Collect_Date<-paste0(substr(sites$Collect_Date,6,9),"-0",
substr(sites$Collect_Date,1,1),"-",
substr(sites$Collect_Date,3,4))
#sites$Collect_Date<-as_date(sites$Collect_Date)
sites$month<-as.numeric(substr(sites$SID,4,4))
sites
Stream<-"Pequabuck River"
distStream<-sites[sites$Stream==Stream,]
distSite<-distStream[c("Temp")]
rownames(distSite)<-distStream$SID
Site.dist<-vegdist(distSite,"euclidean")
SPPStream<-SPP[7:12,] #13:18 - Salmon, 7:12 - Pequabuck, 1:6 - Norwalk
SPPStream<- decostand(SPPStream,"hellinger")#Sqrt of rel abundance
SSPP.dist <- vegdist(SPPStream,"bray")
SPPTemp<-mantel(SSPP.dist,Site.dist)
SPPTemp
Stream<-"Pequabuck River"
SPDistSite<-SPDist[SPDist$Stream==Stream,]
ggplot(SPDistSite,aes(x=TPDiff,y=((1-value)*100)))+
geom_point()+
geom_smooth(method=lm,se=FALSE,colour="black")+
ylim(0,100)+
labs(y ="Species similarity (%)", x="Temp Degree C distance",
title=Stream)
Stream<-"Salmon River"
distStream<-sites[sites$Stream==Stream,]
distSite<-distStream[c("Temp")]
rownames(distSite)<-distStream$SID
Site.dist<-vegdist(distSite,"euclidean")
SPPStream<-SPP[13:18,] #13:18 - Salmon, 7:12 - Pequabuck, 1:6 - Norwalk
SPPStream<- decostand(SPPStream,"hellinger")#Sqrt of rel abundance
SSPP.dist <- vegdist(SPPStream,"bray")
SPPTemp<-mantel(SSPP.dist,Site.dist)
SPPTemp
Stream<-"Norwalk River"
distStream<-sites[sites$Stream==Stream,]
distSite<-distStream[c("Temp")]
rownames(distSite)<-distStream$SID
Site.dist<-vegdist(distSite,"euclidean")
SPPStream<-SPP[1:6,] #13:18 - Salmon, 7:12 - Pequabuck, 1:6 - Norwalk
SPPStream<- decostand(SPPStream,"hellinger")#Sqrt of rel abundance
SSPP.dist <- vegdist(SPPStream,"bray")
SPPTemp<-mantel(SSPP.dist,Site.dist)
SPPTemp
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2!=0 & SPDist$CSID==SPDist$RSID),]
SPDist$MDiff<-abs(SPDist$MS1-SPDist$MS2)
SPDist<-merge(SPDist,sites,by.x=c("col","Station.ID","Stream"),
by.y=c("SID","Station.ID","Stream"))
colnames(SPDist)[5]<-"SimDate"
colnames(SPDist)[14]<-"Collect_Date"
SPDist$SimDate<-as_date(SPDist$SimDate)
SPDist$Collect_Date<-as_date(SPDist$Collect_Date)
SPDist$DDiff<-abs(SPDist$Collect_Date-SPDist$SimDate)
SPDist$TPDiff<-abs(SPDist$TP.x-SPDist$TP.y)
SPP<- decostand(SPP,"hellinger")#Sqrt of rel abundance
SPP.dist <- vegdist(SPP,"bray")
SPP.dist<-as.matrix(SPP.dist)
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2!=0 & SPDist$CSID==SPDist$RSID),]
SPDist$MDiff<-abs(SPDist$MS1-SPDist$MS2)
SPDist<-merge(SPDist,sites,by.x=c("col","Station.ID","Stream"),
by.y=c("SID","Station.ID","Stream"))
colnames(SPDist)[5]<-"SimDate"
colnames(SPDist)[14]<-"Collect_Date"
SPDist$SimDate<-as_date(SPDist$SimDate)
SPDist$Collect_Date<-as_date(SPDist$Collect_Date)
SPDist$DDiff<-abs(SPDist$Collect_Date-SPDist$SimDate)
SPDist$TPDiff<-abs(SPDist$TP.x-SPDist$TP.y)
Stream<-"Pequabuck River"
SPDistSite<-SPDist[SPDist$Stream==Stream,]
ggplot(SPDistSite,aes(x=TPDiff,y=((1-value)*100)))+
geom_point()+
geom_smooth(method=lm,se=FALSE,colour="black")+
ylim(0,100)+
labs(y ="Species similarity (%)", x="Temp Degree C distance",
title=Stream)
setwd("P:/Projects/GitHub_Prj/SeasonalProductivity")
library(vegan)
library(reshape2)
library(dplyr)
library(lattice)
library(ggplot2)
library(lubridate)
SPP<- read.csv("data/SPP.csv",header=TRUE,row.names=1)
SPP[is.na(SPP)] <- 0
sites<- read.csv("data/sites.csv",header=TRUE)
sites$Collect_Date<-paste0(substr(sites$Collect_Date,6,9),"-0",
substr(sites$Collect_Date,1,1),"-",
substr(sites$Collect_Date,3,4))
#sites$Collect_Date<-as_date(sites$Collect_Date)
sites$month<-as.numeric(substr(sites$SID,4,4))
sites
Stream<-"Pequabuck River"
distStream<-sites[sites$Stream==Stream,]
distSite<-distStream[c("Temp")]
rownames(distSite)<-distStream$SID
Site.dist<-vegdist(distSite,"euclidean")
SPPStream<-SPP[7:12,] #13:18 - Salmon, 7:12 - Pequabuck, 1:6 - Norwalk
SPPStream<- decostand(SPPStream,"hellinger")#Sqrt of rel abundance
SSPP.dist <- vegdist(SPPStream,"bray")
SPPTime<-mantel(SSPP.dist,Site.dist)
SPPTime
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2!=0 & SPDist$CSID==SPDist$RSID),]
SPDist$MDiff<-abs(SPDist$MS1-SPDist$MS2)
SPDist<-merge(SPDist,sites,by.x=c("col","Station.ID","Stream"),
by.y=c("SID","Station.ID","Stream"))
colnames(SPDist)[5]<-"SimDate"
colnames(SPDist)[14]<-"Collect_Date"
SPDist$SimDate<-as_date(SPDist$SimDate)
SPDist$Collect_Date<-as_date(SPDist$Collect_Date)
SPDist$DDiff<-abs(SPDist$Collect_Date-SPDist$SimDate)
SPDist$TPDiff<-abs(SPDist$TP.x-SPDist$TP.y)
SPP<- decostand(SPP,"hellinger")#Sqrt of rel abundance
SPP.dist <- vegdist(SPP,"bray")
SPP.dist<-as.matrix(SPP.dist)
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.4),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2!=0 & SPDist$CSID==SPDist$RSID),]
SPDist$MDiff<-abs(SPDist$MS1-SPDist$MS2)
SPDist<-merge(SPDist,sites,by.x=c("col","Station.ID","Stream"),
by.y=c("SID","Station.ID","Stream"))
colnames(SPDist)[5]<-"SimDate"
colnames(SPDist)[14]<-"Collect_Date"
SPDist$SimDate<-as_date(SPDist$SimDate)
SPDist$Collect_Date<-as_date(SPDist$Collect_Date)
SPDist$DDiff<-abs(SPDist$Collect_Date-SPDist$SimDate)
SPDist$TPDiff<-abs(SPDist$TP.x-SPDist$TP.y)
SPPTime
SPDist$TempDiff<-abs(SPDist$Temp.x=SPDist$Temp.y)
SPDist$TempDiff<-abs(SPDist$Temp.x-SPDist$Temp.y)
SPDist
sites
SPPTime
Stream<-"Pequabuck River"
SPDistSite<-SPDist[SPDist$Stream==Stream,]
ggplot(SPDistSite,aes(x=TempDiff,y=((1-value)*100)))+
geom_point()+
geom_smooth(method=lm,se=FALSE,colour="black")+
ylim(0,100)+
labs(y ="Species similarity (%)", x="Temp (Degree C) distance",
title=Stream)+
annotate("text", x=c(0.001,13), y=c(90,85),
label=c("mantel r = 0.594","p = 0.039"),hjust=0)
Stream<-"Pequabuck River"
SPDistSite<-SPDist[SPDist$Stream==Stream,]
ggplot(SPDistSite,aes(x=TempDiff,y=((1-value)*100)))+
geom_point()+
geom_smooth(method=lm,se=FALSE,colour="black")+
ylim(0,100)+
labs(y ="Species similarity (%)", x="Temp (Degree C) distance",
title=Stream)+
annotate("text", x=c(13,13), y=c(90,85),
label=c("mantel r = 0.594","p = 0.039"),hjust=0)
Stream<-"Pequabuck River"
SPDistSite<-SPDist[SPDist$Stream==Stream,]
ggplot(SPDistSite,aes(x=TempDiff,y=((1-value)*100)))+
geom_point()+
geom_smooth(method=lm,se=FALSE,colour="black")+
ylim(0,100)+
labs(y ="Species similarity (%)", x="Temp (Degree C) distance",
title=Stream)+
annotate("text", x=c(1,1), y=c(90,85),
label=c("mantel r = 0.594","p = 0.039"),hjust=0)
Stream<-"Pequabuck River"
SPDistSite<-SPDist[SPDist$Stream==Stream,]
ggplot(SPDistSite,aes(x=TempDiff,y=((1-value)*100)))+
geom_point()+
geom_smooth(method=lm,se=FALSE,colour="black")+
ylim(0,100)+
labs(y ="Species similarity (%)", x="Temperature (Degree C) distance",
title=Stream)+
annotate("text", x=c(1,1), y=c(90,85),
label=c("mantel r = 0.594","p = 0.039"),hjust=0)
ggsave(paste(Stream,"SPPTempDiff.jpg"),width=4,height=4)
SPP
Stream<-"Salmon River"
distStream<-sites[sites$Stream==Stream,]
distSite<-distStream[c("Temp")]
rownames(distSite)<-distStream$SID
Site.dist<-vegdist(distSite,"euclidean")
SPPStream<-SPP[13:18,] #13:18 - Salmon, 7:12 - Pequabuck, 1:6 - Norwalk
SPPStream<- decostand(SPPStream,"hellinger")#Sqrt of rel abundance
SSPP.dist <- vegdist(SPPStream,"bray")
SPPTime<-mantel(SSPP.dist,Site.dist)
SPPTime
Stream<-"Salmon River"
SPDistSite<-SPDist[SPDist$Stream==Stream,]
ggplot(SPDistSite,aes(x=TempDiff,y=((1-value)*100)))+
geom_point()+
geom_smooth(method=lm,se=FALSE,colour="black")+
ylim(0,100)+
labs(y ="Species similarity (%)", x="Temperature (Degree C) distance",
title=Stream)+
annotate("text", x=c(1,1), y=c(90,85),
label=c("mantel r = 0.4487","p = 0.057"),hjust=0)
ggsave(paste(Stream,"SPPTempDiff.jpg"),width=4,height=4)
Stream<-"Norwalk River"
distStream<-sites[sites$Stream==Stream,]
distSite<-distStream[c("Temp")]
rownames(distSite)<-distStream$SID
Site.dist<-vegdist(distSite,"euclidean")
SPPStream<-SPP[1:6,] #13:18 - Salmon, 7:12 - Pequabuck, 1:6 - Norwalk
SPPStream<- decostand(SPPStream,"hellinger")#Sqrt of rel abundance
SSPP.dist <- vegdist(SPPStream,"bray")
SPPTime<-mantel(SSPP.dist,Site.dist)
SPPTime
Stream<-"Salmon River"
SPDistSite<-SPDist[SPDist$Stream==Stream,]
ggplot(SPDistSite,aes(x=TempDiff,y=((1-value)*100)))+
geom_point()+
geom_smooth(method=lm,se=FALSE,colour="black")+
ylim(0,100)+
labs(y ="Species similarity (%)", x="Temperature (Degree C) distance",
title=Stream)+
annotate("text", x=c(1,1), y=c(90,85),
label=c("mantel r = 0.4707","p = 0.05"),hjust=0)
ggsave(paste(Stream,"SPPTempDiff.jpg"),width=4,height=4)
Stream<-"Norwalk River"
SPDistSite<-SPDist[SPDist$Stream==Stream,]
ggplot(SPDistSite,aes(x=TempDiff,y=((1-value)*100)))+
geom_point()+
geom_smooth(method=lm,se=FALSE,colour="black")+
ylim(0,100)+
labs(y ="Species similarity (%)", x="Temperature (Degree C) distance",
title=Stream)+
annotate("text", x=c(1,1), y=c(90,85),
label=c("mantel r = 0.4707","p = 0.05"),hjust=0)
ggsave(paste(Stream,"SPPTempDiff.jpg"),width=4,height=4)
Stream<-"Salmon River"
distStream<-sites[sites$Stream==Stream,]
distSite<-distStream[c("Temp")]
rownames(distSite)<-distStream$SID
Site.dist<-vegdist(distSite,"euclidean")
SPPStream<-SPP[13:18,] #13:18 - Salmon, 7:12 - Pequabuck, 1:6 - Norwalk
SPPStream<- decostand(SPPStream,"hellinger")#Sqrt of rel abundance
SSPP.dist <- vegdist(SPPStream,"bray")
SPPTime<-mantel(SSPP.dist,Site.dist)
SPPTime
Stream<-"Salmon River"
SPDistSite<-SPDist[SPDist$Stream==Stream,]
ggplot(SPDistSite,aes(x=TempDiff,y=((1-value)*100)))+
geom_point()+
geom_smooth(method=lm,se=FALSE,colour="black")+
ylim(0,100)+
labs(y ="Species similarity (%)", x="Temperature (Degree C) distance",
title=Stream)+
annotate("text", x=c(1,1), y=c(90,85),
label=c("mantel r = 0.4487","p = 0.057"),hjust=0)
ggsave(paste(Stream,"SPPTempDiff.jpg"),width=4,height=4)
