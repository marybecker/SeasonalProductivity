parse_fstat<-function(fstat_lines,skip='#',delim='\t'){
x<-1;
while(x<length(fstat_lines) && startsWith(fstat_lines[x],skip)){
x<-x+1;
}
header<-strsplit(fstat_lines[x],delim)[[1]];
D<-as.data.frame(matrix('',ncol=length(header),nrow=length(fstat_lines)-x),stringsAsFactors=F);
colnames(D)<-header;
for(i in x+2:length(fstat_lines)){
r<-strsplit(fstat_lines[i],delim)[[1]];
D[i-x-1,1:length(r)]<-r;
}
D
}
qwdata<- parse_fstat(readLines(/Users/tbecker/Downloads/qwdata.txt))
qwdata<- parse_fstat(readLines("/Users/tbecker/Downloads/qwdata.txt"))
fstat_lines<-readLines('/Users/tbecker/Downloads/qwdata.txt')
skip='#'
data_pos='2'
delim='\t'
x<-1;
while(x<length(fstat_lines) && startsWith(fstat_lines[x],skip)){
x<-x+1;
}
header<-strsplit(fstat_lines[x],delim)[[1]];
D<-as.data.frame(matrix('',ncol=length(header),nrow=length(fstat_lines)-x-data_pos,stringsAsFactors=F));
colnames(D)<-header;
x<-1;
while(x<length(fstat_lines) && startsWith(fstat_lines[x],skip)){
x<-x+1;
}
header<-strsplit(fstat_lines[x],delim)[[1]];
D<-as.data.frame(matrix('',ncol=length(header),nrow=length(fstat_lines)-x-data_pos),stringsAsFactors=F);
colnames(D)<-header;
header
colnames(D)
length(header)
x
x-data_pos
data_pos
data_pos=2
x-data_pos
length(fstat_lines)-x-data_pos
length(fstat_lines)-x
header
fstat_lines[x]
fstat_lines[x+data_pos]
x<-1;
while(x<length(fstat_lines) && startsWith(fstat_lines[x],skip)){
x<-x+1;
}
header<-strsplit(fstat_lines[x],delim)[[1]];
D<-as.data.frame(matrix('',ncol=length(header),nrow=length(fstat_lines)-x-data_pos+1),stringsAsFactors=F);
colnames(D)<-header;
colnames(D)
colnames(D)
i=x+data_pos
dtat_lines[i]
ftat_lines[i]
fstat_lines[i]
r<-strsplit(fstat_lines[i],delim)[[1]]
r
i-x-data_pos
i-x-data_pos+1
D[i-x-data_pos+1,1:length(r)]<-r;
D[1]
D[1,]
D[1:2,]
D[1:3,]
D[1:3,]
x<-1;
while(x<length(fstat_lines) && startsWith(fstat_lines[x],skip)){
x<-x+1;
}
header<-strsplit(fstat_lines[x],delim)[[1]];
D<-as.data.frame(matrix('',ncol=length(header),nrow=length(fstat_lines)-x-data_pos+1),stringsAsFactors=F);
colnames(D)<-header;
for(i in x+data_pos:length(fstat_lines)){
r<-strsplit(fstat_lines[i],delim)[[1]];
D[i-x-data_pos+1,1:length(r)]<-r;
}
i
x
P:/Projects/GitHub_Prj/SeasonalProductivity
setwd("/Users/tbecker/Documents/Projects/GitHubProjects/SeasonalProductivity")
library(vegan)
library(reshape2)
SPP<- read.csv("data/SPP.csv",header=TRUE,row.names=1)
SPP[is.na(SPP)] <- 0
sites<- read.csv("data/sites.csv",header=TRUE)
SPP<- decostand(SPP,"total")
SPP.dist <- vegdist(SPP,"bray")
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
unique(site.name[c("STA_SEQ","Station_Name")])
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb
site.comb[1]
site.comb[,1]
site.comb[1,]
s<- site.comb[1,]
s[1]
s[2]
SPDist[which(SPDist$CID==s[1] & SPDist$RID==s[1]),]
SPDist[which(SPDist$CSID==s[2] & SPDist$RID==s[1]),]
names(SPDist)
s$CSID[1]
SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RID==s$RSID[1]),]
s$RSID[1]
SPDist[match(SPDist$CSID==s$CSID[1] & SPDist$RID==s$RSID[1]),]
SPDist[1:10,]
SPDist[match(SPDist$CSID==s$CSID[1] & SPDist$RID==s$RSID[1]),]
SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RID==s$RSID[1]),]
SPDist[which(SPDist$CSID=="PEQ" SPDist$RID=="NOR"),]
SPDist[which(SPDist$CSID=="PEQ" & SPDist$RID=="NOR"),]
SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
SPDist[which(value!=0),]
SPDist[which(SPDist$value!=0),]
s<- site.comb[1,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
c
m<-colMeans(c$value)
m<-mean(c$value)
m
site.comb
site.comb$mean<- 0
site.comb
length(site.comb)
dim(site.comb)
dim(site.comb)[1]
site.comb$mean[1]
site.comb$mean[1]<-1
site.comb
site.comb$mean[1]<-m
site.comb
for i in 1:dim(site.comb)[1] {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
n<-dim(site.comb)[1]
n
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
site.comb
setwd("P:/Projects/GitHub_Prj/SeasonalProductivity")
library(vegan)
library(reshape2)
SPP<- read.csv("data/SPP.csv",header=TRUE,row.names=1)
SPP[is.na(SPP)] <- 0
sites<- read.csv("data/sites.csv",header=TRUE)
SPP<- decostand(SPP,"total")
SPP.dist <- vegdist(SPP,"bray")
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
##Calcuated average similarity measure for each combination##
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
site.comb
site.comb<-site.comb1
site.comb1<-site.comb
site.comb1
SPP.dist <- vegdist(SPP,"hellinger")
SPP<- decostand(SPP,"hellinger")
SPP.dist <- vegdist(SPP,"bray")
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
site.comb
site.comb1
SPDist
SPDist$MS1<-substr(SPDist$SID,4,4)
SPDist$MS2<-substr(SPDist$col,4,4)
SPDist[1:10,]
SPDist[1:30,]
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2==0),]
SPDist$M<-SPDist$MS1-SPDist$MS2
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2==0),]
SPDist
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
site.comb
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
site.com
site.comb
site.comb1
SPDist
dim(SPDist)
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2==0 & SPDist$CSID==SPDist$RSID),]
SPDist
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
write.csv(SPDist,"SPBCDist.csv")
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2==0 & SPDist$CSID!=SPDist$RSID),]
SPDist
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
write.csv(SPDist,"SPBCDist.csv")
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2!=0 & SPDist$CSID==SPDist$RSID),]
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
site.comb
SPDist
nmds<- metaMDS(SPP.dist,k=3)
nmds<- metaMDS(SPP.dist)
SPDist
SPP.dist
SPP.dist <- vegdist(SPP,"bray",binary=TRUE)
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
write.csv(SPDist,"SPBCDist.csv")
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2==0 & SPDist$CSID!=SPDist$RSID),]
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
#Calcuated average similarity measure for each combination#
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
site.comb
SPDist
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
write.csv(SPDist,"SPBCDist.csv")
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2!=0 & SPDist$CSID==SPDist$RSID),]
SPDist<-unique(SPDist[,c(2,3)]
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
#Calcuated average similarity measure for each combination#
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
site.comb
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
write.csv(SPDist,"SPBCDist.csv")
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2!=0 & SPDist$CSID==SPDist$RSID),]
SPDist<-unique(SPDist[,c(2,3)]
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
write.csv(SPDist,"SPBCDist.csv")
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2!=0 & SPDist$CSID==SPDist$RSID),]
SPDist<-unique(SPDist[,c(2,3)]
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
write.csv(SPDist,"SPBCDist.csv")
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2!=0 & SPDist$CSID==SPDist$RSID),]
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
#Calcuated average similarity measure for each combination#
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
site.comb
SPDist
library(dplyr)
SPDist %>% distinct(Station.ID,MS1,MS2)
SPP.dist
image(SPP.dist,col=terrain.colors(10),zlim=c(-1,1))
image(SPP.dist,col=terrain.colors(10))
image(SPP.dist)
SPP.dist
class(SPP.dist)
as.matrix(SPP.dist)
image(SPP.dist)
class(SPP.dist)
SPP.dist<-as.matrix(SPP.dist)
image(SPP.dist)
library(lattice)
levelplot(SPP.dist)
levelplot(SPP.dist,at=seq(0,1,0.01))
levelplot(SPP.dist,at=seq(0,1,0.1))
levelplot(SPP.dist,at=seq(0,1,0.01))
levelplot(SPP.dist,at=seq(0,1,0.01),col.regions=terrain.colors(100))
levelplot(SPP.dist,at=seq(0,1,0.01),col.regions=terrain.colors(100),scales=list(cex=0.5))
levelplot(SPP.dist,at=seq(0,1,0.01),col.regions=terrain.colors(100),scales=list(cex=0.7))
levelplot(SPP.dist,at=seq(0,1,0.01),col.regions=terrain.colors(100),scales=list(cex=0.6))
levelplot(SPP.dist,at=seq(0,1,0.01),col.regions=terrain.colors(100),scales=list(cex=0.5))
levelplot(SPP.dist,at=seq(0,1,0.1),col.regions=terrain.colors(100),scales=list(cex=0.5))
levelplot(SPP.dist,at=seq(0,1,0.01),col.regions=terrain.colors(100),scales=list(cex=0.5))
SPP.dist <- vegdist(SPP,"bray",binary=TRUE)
levelplot(SPP.dist,at=seq(0,1,0.01),col.regions=terrain.colors(100),scales=list(cex=0.5))
SPP.dist<-as.matrix(SPP.dist)
levelplot(SPP.dist,at=seq(0,1,0.01),col.regions=terrain.colors(100),scales=list(cex=0.5))
levelplot(SPP.dist,at=seq(0,1,0.01),col.regions=topo.colors(100),scales=list(cex=0.5))
levelplot(SPP.dist,at=seq(0,1,0.01),col.regions=cm.colors(100),scales=list(cex=0.5))
levelplot(SPP.dist,at=seq(0,1,0.01),col.regions=heat.colors(100),scales=list(cex=0.5))
levelplot(SPP.dist,at=seq(0,1,0.01),col.regions=rainbow(100),scales=list(cex=0.5))
levelplot(SPP.dist,at=seq(0,1,0.01),col.regions=topo.colors(500),scales=list(cex=0.5))
levelplot(SPP.dist,at=seq(0,1,0.01),col.regions=topo.colors(100),scales=list(cex=0.5))
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.5),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
SPP.dist <- vegdist(SPP,"bray")
SPP.dist<-as.matrix(SPP.dist)
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.5),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
SPDist
SPP.dist <- vegdist(SPP,"bray")
SPP.dist<-as.matrix(SPP.dist)
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.5),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
SPP.dist <- vegdist(SPP,"bray")
SPP.dist<-as.matrix(SPP.dist)
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(1000),scales=list(cex=0.5),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
SPP.dist <- vegdist(SPP,"bray")
SPP.dist<-as.matrix(SPP.dist)
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.5),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
