paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
shinyApp(ui,server)
shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
shinyApp(ui,server)
shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app
app<- shinyApp(
####Connect to AWQ DB and get most recent stations table
cn<- odbcDriverConnect("Driver=ODBC Driver 13 for SQL Server; Server= 10.18.8.110; Database=WQX;
Uid=wqx_readonly;Pwd=wqx_readonly")
sites<- sqlFetch(cn,"Stations")
sites$SID<- paste(sites$Station_Name,sites$STA_SEQ)
odbcClose(cn)
#######Load user interface
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
setwd("P:/Projects/GitHub_Prj/SeasonalProductivity")
library(vegan)
library(reshape2)
library(dplyr)
library(lattice)
SPP<- read.csv("data/SPP.csv",header=TRUE,row.names=1)
SPP[is.na(SPP)] <- 0
sites<- read.csv("data/sites.csv",header=TRUE)
colSums(SPP)
colSums(SPP)<5
SPP5<- SPP[which(colSums(SPP)<5 == TRUE),]
SPP5<- SPP[colSums(SPP)<5,]
SPP5
SPP5<- SPP[,colSums(SPP)<5]
SPP5
colSums(SPP)>0
table(SPP)
SPP5<- decostand(SPP,"pa")
SPP5<- SPP[,colSums(SPP)<5]
SPP5<- decostand(SPP,"pa")
SPP5
colSums
colSums(SPP5)
SPP5<- SPP[,colSums(SPP5)<5]
SPP5
colnames(SPP5)
n<- colnames(SPP5)
SPP5<- SPP[,n]
SPP5
Other<-rowSums(SPP5)
Other
melt(as.data.frame(Other),varnames="Other")
colnames(Other)
names(Other)
melt(as.data.frame(Other),varnames=names(Other))
n<-names(Other)
melt(as.data.frame(Other),varnames=n)
Other<-rowSums(SPP5)
melt(as.data.frame(Other),id=1:18)
Other
melt(as.data.frame(Other),varnames=1:18)
Other[1:18]
colnames(SPP)
names(SPP)
row.names(SPP)
row.names(Other)<-n
Other<- melt(as.data.frame(Other))
row.names(Other)<-n
Other
Other<-Other[,2]
Other
SPP5<- decostand(SPP,"pa")
SPP5<- SPP[,colSums(SPP5)<5]
n<- colnames(SPP5)
SPP5<- SPP[,n]
Other<-rowSums(SPP5)
n<-names(Other)
Other<- melt(as.data.frame(Other))
row.names(Other)<-n
Other<-as.data.frame(Other[,2])
Other
SPP5<- decostand(SPP,"pa")
SPP5<- SPP[,colSums(SPP5)<5]
n<- colnames(SPP5)
SPP5<- SPP[,n]
Other<-rowSums(SPP5)
n<-names(Other)
Other<- melt(as.data.frame(Other))
row.names(Other)<-n
Other$variable<- NULL
Other
colnames(Other)<-"Other"
colnames()
Other
SPP5
SPP5<- decostand(SPP,"pa")
SPP5<- SPP[,colSums(SPP5)<5]
n<- colnames(SPP5)
SPP5<- SPP[,n]
Other<-rowSums(SPP5)
Oname<-names(Other)
Other<- melt(as.data.frame(Other))
row.names(Other)<-Oname
Other$variable<- NULL
colnames(Other)<-"Other"
Other
