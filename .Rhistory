fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
shinyApp(ui,server)
getwd(0)
getwd()
runApp()
if(!require(RODBC)| !require(leaflet)|!require(shiny)) {
install.packages(c('RODBC','leaflet','shiny'),dependencies = TRUE)
}
runApp()
getwd
getwd()
###Check for required libraries and load and/or install
if(!require(RODBC)| !require(leaflet)|!require(shiny)) {
install.packages(c('RODBC','leaflet','shiny'),dependencies = TRUE)
}
####Connect to AWQ DB and get most recent stations table
cn<- odbcDriverConnect("Driver=ODBC Driver 13 for SQL Server; Server= 10.18.8.110; Database=WQX;
Uid=wqx_readonly;Pwd=wqx_readonly")
sites<- sqlFetch(cn,"Stations")
sites$SID<- paste(sites$Station_Name,sites$STA_SEQ)
odbcClose(cn)
#######Load user interface
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
shinyApp(ui,server)
shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
shinyApp(ui,server)
shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app
app<- shinyApp(
####Connect to AWQ DB and get most recent stations table
cn<- odbcDriverConnect("Driver=ODBC Driver 13 for SQL Server; Server= 10.18.8.110; Database=WQX;
Uid=wqx_readonly;Pwd=wqx_readonly")
sites<- sqlFetch(cn,"Stations")
sites$SID<- paste(sites$Station_Name,sites$STA_SEQ)
odbcClose(cn)
#######Load user interface
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
setwd("P:/Projects/GitHub_Prj")
library(vegan)
SPP<- read.csv("/data/SPP.csv",header=TRUE,row.names=1)
SPP<- read.csv("data/SPP.csv",header=TRUE,row.names=1)
setwd("P:/Projects/GitHub_Prj/SeasonalProductivity")
SPP<- read.csv("/data/SPP.csv",header=TRUE,row.names=1)
SPP<- read.csv("data/SPP.csv",header=TRUE,row.names=1)
SPP[is.na(SPP)] <- 0
SPP<- decostand(SPP,"total")
nrow(SPP)
rowSums(SPP)
SPP[1:10,]
SPP.dist <- vegdist(SPP,"bray")
SPP.dist
class(SPP.dist)
write.csv(SPP.dist,"BCSPPdist.csv")
SPP.dist.DF<- melt(as.matrix(SPP.dist),varnames=c("row","col"))
library(reshape2)
SPP.dist.DF<- melt(as.matrix(SPP.dist),varnames=c("row","col"))
SPP.dist.DF
SPDist<- melt(as.matrix(SPP.dist),varnames=c("row","col"))
aggregate(SPDist$value,by=SPDist$row,FUN=mean)
write.csv(SPDist,"SPBCDist.csv")
names(SPP.dist)
sites<- read.csv("data/sites.csv",header=TRUE)
names(SPDist)
names(SPDist)
names(sites)
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
SPDist<-merge(sites,SPDist,by="SID")
SPDist[1:10,]
SPDist$CSID<-substr(col,1,3)
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist[1:10,]
unique(SPDist$Stream,SPDist$CSID)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist[1:10,]
unique(SPDist$RSID,SPDist$CSID)
site.comb<-SPDist[,6:7]
site.comb<-unique[site.comb[c("RSID","CSID")])
site.comb<-unique(site.comb[site.comb[c("RSID","CSID")])
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb
