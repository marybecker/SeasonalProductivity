geom_boxplot()+
labs(title=n[i,2]))
}
p5
p7
class(data$result_va)
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va),log="y")+
geom_boxplot()+
labs(title=n[i,2]))
}
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[i,2]))
}
p7
p1
p8
#####MULTI-Plot Function##############
#######################################
#call this with p1,p,2,... cols=4
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
plots <- c(list(...), plotlist)
numPlots = length(plots)
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
pdf("NutrientRanges.pdf")
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
pdf("NutrientRanges.pdf",width=11,height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[i,2]))+
theme(axis.title=element_blank())
}
pdf("NutrientRanges.pdf",width=11,height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
p1
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[i,2]))+
theme(axis.title.x=element_blank(),axis.title.y=element_blank())
}
p1
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[i,2]))+
theme(axis.title.x=element_blank(),axis.title.y=element_blank())
i<-1
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[i,2]))+
theme(axis.title.x=element_blank(),axis.title.y=element_blank())
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[i,2]))
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[1,2]))+
theme(axis.title.x=element_blank(),axis.title.y=element_blank())
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[1,2]))
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
assign(paste0("p",i),
ggplot(d,aes(site_no,result_va))+
geom_boxplot()+
scale_y_log10()+
labs(title=n[i,2])+
theme(axis.title.x=element_blank(),axis.title.y=element_blank()))
}
pdf("NutrientRanges.pdf",width=11,height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
setwd("/Users/tbecker/Documents/Projects/GitHubProjects/SeasonalProductivity")
library(vegan)
library(reshape2)
library(dplyr)
library(lattice)
SPP<- read.csv("data/SPP.csv",header=TRUE,row.names=1)
SPP[is.na(SPP)] <- 0
sites<- read.csv("data/sites.csv",header=TRUE)
SPP<- decostand(SPP,"hellinger")
SPP.dist <- vegdist(SPP,"bray")
SPP.dist<-as.matrix(SPP.dist)
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.5),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2==0 & SPDist$CSID!=SPDist$RSID),]
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
site.comb
SPDist
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2==0 & SPDist$CSID!=SPDist$RSID),]
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
write.csv(SPDist,"SPBCDist.csv")
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
write.csv(SPDist,"SPBCDist.csv")
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2!=0 & SPDist$CSID==SPDist$RSID),]
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
site.comb
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
SPDist
SPP.dist
SPP
SPP$AHminuti
SPP<- read.csv("data/SPP_TP.csv",header=TRUE,row.names=1)
SPP[is.na(SPP)] <- 0
sites<- read.csv("data/sites.csv",header=TRUE)
SPP<-sqrt(SPP)
SPP$AHminuti
SPP.dist <- vegdist(SPP,"bray")
SPP.dist<-as.matrix(SPP.dist)
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.5),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2!=0 & SPDist$CSID==SPDist$RSID),]
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
site.comb
SPP.dist <- vegdist(SPP,"bray",binary=TRUE)
SPP.dist<-as.matrix(SPP.dist)
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.5),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2!=0 & SPDist$CSID==SPDist$RSID),]
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
#Calcuated average similarity measure for each combination#
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
site.comb
SPP<- read.csv("data/SPP.csv",header=TRUE,row.names=1)
SPP[is.na(SPP)] <- 0
sites<- read.csv("data/sites.csv",header=TRUE)
#SPP<-sqrt(SPP)#Transformation when rel abund values
SPP<- decostand(SPP,"hellinger")#Sqrt of rel abundance
SPP.dist <- vegdist(SPP,"bray",binary=TRUE)
SPP.dist<-as.matrix(SPP.dist)
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.5),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2!=0 & SPDist$CSID==SPDist$RSID),]
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
#Calcuated average similarity measure for each combination#
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
site.comb
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
write.csv(SPDist,"SPBCDist.csv")
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2==0 & SPDist$CSID!=SPDist$RSID),]
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
#Calcuated average similarity measure for each combination#
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
site.comb
SPP<- read.csv("data/SPP_Genus.csv",header=TRUE,row.names=1)
SPP[is.na(SPP)] <- 0
sites<- read.csv("data/sites.csv",header=TRUE)
SPP<- read.csv("data/SPP_Genus.csv",header=TRUE,row.names=1)
SPP[is.na(SPP)] <- 0
sites<- read.csv("data/sites.csv",header=TRUE)
SPP<- decostand(SPP,"hellinger")#Sqrt of rel abundance
SPP.dist <- vegdist(SPP,"bray",binary=TRUE)
SPP.dist<-as.matrix(SPP.dist)
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.5),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
SPP.dist <- vegdist(SPP,"bray")
SPP.dist<-as.matrix(SPP.dist)
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.5),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
SPP<- read.csv("data/SPP.csv",header=TRUE,row.names=1)
SPP[is.na(SPP)] <- 0
sites<- read.csv("data/sites.csv",header=TRUE)
#SPP<-sqrt(SPP)#Transformation when rel abund values
SPP<- decostand(SPP,"hellinger")#Sqrt of rel abundance
SPP.dist <- vegdist(SPP,"bray")
SPP.dist<-as.matrix(SPP.dist)
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.4),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.45),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
levelplot(SPP.dist,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.4),
xlab="",ylab="",main="Percent Difference Coefficient (Bray Curtis)")
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
write.csv(SPDist,"SPBCDist.csv")
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2==0 & SPDist$CSID!=SPDist$RSID),]
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
site.comb
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
site.comb
write.csv(site.comb,"DistBetweenSites.csv")
SPDist<- melt(as.matrix(SPP.dist),varnames=c("SID","col"))
SPDist<-merge(sites,SPDist,by="SID")
SPDist$CSID<-substr(SPDist$col,1,3)
SPDist$RSID<-substr(SPDist$SID,1,3)
SPDist$MS1<-as.numeric(substr(SPDist$SID,4,4))
SPDist$MS2<-as.numeric(substr(SPDist$col,4,4))
SPDist<-SPDist[which(SPDist$MS1-SPDist$MS2!=0 & SPDist$CSID==SPDist$RSID),]
site.comb<-SPDist[,6:7]
site.comb<-unique(site.comb[c("RSID","CSID")])
site.comb$mean<- 0
for (i in 1:dim(site.comb)[1]) {
s<- site.comb[i,]
c<-SPDist[which(SPDist$CSID==s$CSID[1] & SPDist$RSID==s$RSID[1]),]
c<-c[which(c$value!=0),]
m<-mean(c$value)
site.comb$mean[i]<-m
}
site.comb
write.csv(site.comb,"WithinSites.csv")
setwd("/Users/tbecker/Documents/Projects/GitHubProjects/SeasonalProductivity")
library(dataRetrieval)
library(plyr)
library(ggplot2)
library(grid)
library(reshape2)
install.packages("dataRetrieval")
library(dataRetrieval)
SID<- c("01189000","01209700","01193500")
Cd<-c("00605","00608","00613","00618","00631","00660","00665","00671","62855")
sdate<-"2016-01-01"
edate<-"2017-01-01"
data <- readNWISqw(siteNumbers = SID,
parameterCd = Cd,
startDate = sdate,
endDate = edate)
dsum<- data%>%
group_by(site_no,parm_cd)%>%
summarize(count=n(),avg=mean(result_va),
min=min(result_va),max=max(result_va),
med=median(result_va))
pCd<-unique(data$parm_cd)
pNm<- c("Organic nitrogen, wu, mg/l","Ammonia, wf, mg/l as N","Nitrite, wf, mg/l as N",
"Nitrate, wf, mg/l as N","NO3+NO2, wf, mg/l as N","Orthophosphate, wf, mg/l",
"Phosphorus, wu, mg/l as P","Orthophosphate, wf, mg/l as P","Total nitrogen, wu, mg/l")
n<-as.data.frame(cbind(pCd,pNm))
data$site_no<- factor(data$site_no,levels=c("01193500","01209700","01189000"))
d<- data[data$parm_cd==n[1,1],]
d
names(d)
unique(d$site_no)
class(d$site_no)
d<-d[d$site_no=='01193500']
d
d[1:10,]
names(d)
d<- data[data$parm_cd==n[1,1],]
d<-d[d$site_no=='01193500',]
d
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
d<-d[d$site_no=='01193500',]
assign(paste0("p",i),
ggplot(d,aes(sample_dt,result_va))+
geom_point()+
scale_y_log10()+
labs(title=n[i,2])+
theme(axis.title.x=element_blank(),axis.title.y=element_blank()))
}
pdf("NutrientScatterplot_01193500.pdf",width=11,height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
plots <- c(list(...), plotlist)
numPlots = length(plots)
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
d<-d[d$site_no=='01193500',]
assign(paste0("p",i),
ggplot(d,aes(sample_dt,result_va))+
geom_point()+
scale_y_log10()+
labs(title=n[i,2])+
theme(axis.title.x=element_blank(),axis.title.y=element_blank()))
}
pdf("NutrientScatterplot_01193500.pdf",width=11,height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
d<-d[d$site_no=='01189000',]
assign(paste0("p",i),
ggplot(d,aes(sample_dt,result_va))+
geom_point()+
scale_y_log10()+
labs(title=n[i,2])+
theme(axis.title.x=element_blank(),axis.title.y=element_blank()))
}
pdf("NutrientScatterplot_01189000.pdf",width=11,height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
d<-d[d$site_no=='01189000',]
assign(paste0("p",i),
ggplot(d,aes(sample_dt,result_va))+
geom_point()+
labs(title=n[i,2])+
theme(axis.title.x=element_blank(),axis.title.y=element_blank()))
}
pdf("NutrientScatterplot_01189000.pdf",width=11,height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
d<-d[d$site_no=='01193500',]
assign(paste0("p",i),
ggplot(d,aes(sample_dt,result_va))+
geom_point()+
labs(title=n[i,2])+
theme(axis.title.x=element_blank(),axis.title.y=element_blank()))
}
pdf("NutrientScatterplot_01193500.pdf",width=11,height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
d<-d[d$site_no=='01193500',]
assign(paste0("p",i),
ggplot(d,aes(sample_dt,result_va))+
geom_point()+
geom_smooth(se=TRUE,colour="black")+
labs(title=n[i,2])+
theme(axis.title.x=element_blank(),axis.title.y=element_blank()))
}
pdf("NutrientScatterplot_01193500.pdf",width=11,height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
d<-d[d$site_no=='01209700',]
assign(paste0("p",i),
ggplot(d,aes(sample_dt,result_va))+
geom_point()+
geom_smooth(se=TRUE,colour="black")+
labs(title=n[i,2])+
theme(axis.title.x=element_blank(),axis.title.y=element_blank()))
}
pdf("NutrientScatterplot_01209700.pdf",width=11,height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
for (i in 1:dim(n)[1]){
d<- data[data$parm_cd==n[i,1],]
d<-d[d$site_no=='01189000',]
assign(paste0("p",i),
ggplot(d,aes(sample_dt,result_va))+
geom_point()+
geom_smooth(se=TRUE,colour="black")+
labs(title=n[i,2])+
theme(axis.title.x=element_blank(),axis.title.y=element_blank()))
}
pdf("NutrientScatterplot_01189000.pdf",width=11,height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,cols=3)
dev.off()
